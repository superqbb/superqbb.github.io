<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Like go</title>
        <link>https://likego.club/posts/</link>
        <description>Recent content in Posts on Like go</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>superqbb</copyright>
        <lastBuildDate>Thu, 07 Nov 2019 18:19:48 +0800</lastBuildDate>
        <atom:link href="https://likego.club/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Golang的JWT实战指南</title>
            <link>https://likego.club/posts/2019/11/golang%E7%9A%84jwt%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/</link>
            <pubDate>Thu, 07 Nov 2019 18:19:48 +0800</pubDate>
            
            <guid>https://likego.club/posts/2019/11/golang%E7%9A%84jwt%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/</guid>
            <description>[TOC]
一、JWT介绍 1.1 什么是JSON Web Token? JSON Web令牌（JWT）是一个开放标准（RFC 7519），它定义了一种协议且以自包含的方式在各方之间安全地传输JSON信息。由于此信息是经过数字签名的，因此可以被验证和信任。可以使用加密算法（如HMAC算法）或使用RSA或ECDSA的公钥/私钥对对JWT进行签名。
尽管可以对JWT进行加密以在双方之间提供保密性，但我们将重点关注已 签发的 令牌。已签发的令牌可以验证其中包含的声明的 完整性 ，而加密的令牌则将这些声明 隐藏 在其他方的面前。当使用公钥/私钥对对令牌进行签名时，签名还证明只有持有私钥的一方才是对其进行签名的一方。
1.2 JWT的使用场景  授权：这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登陆(SSO)是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。 信息交换：JSON Web令牌是在各方之间安全地传输信息的好方法。因为可以对JWT进行签名（例如，使用公钥/私钥对），所以您可以确定发送方的身份。另外，由于签名是使用header和playload计算的，因此您还可以验证内容是否未被篡改。  1.3 JSON Web令牌结构 JSON Web令牌由三部分组成的轻量级令牌，这些部分由点（.）分隔，分别是：
 Header 头 Payload 信息载体 Signature 签名  因此，JWT的格式一般如下所示：
xxxxx.yyyyy.zzzzz
Header 标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。 例如：
{ &amp;quot;alg&amp;quot;: &amp;quot;HS256&amp;quot;, &amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot; }  然后，这个JSON会被Base64Url编码以放在JWT的第一部分。
Playload 令牌的第二部分是Playload，其中包含声明。声明是有关实体（通常是用户信息）和其他数据的声明。有以下三种类型：registered, public, and private。
 Registered claims：这些是一组非强制性的但建议使用的预定义声明，以提供一组有用的，可互操作的权利要求。其中一些是： iss（签名签发者）， exp（到期时间）， sub（主题）， aud（受众）和 其他 &amp;gt; 值得注意的是，由于JWT的轻量级，这些声明都是只有三个字符长度的
 Public Claims：使用JWT的人可以随意定义这些声明。但是为避免冲突，应在IANA JSON Web令牌注册表中定义它们，或将其定义为命名空间不冲突的URI。</description>
            <content type="html"><![CDATA[

<p>[TOC]</p>

<h3 id="一-jwt介绍">一、JWT介绍</h3>

<h4 id="1-1-什么是json-web-token">1.1 什么是JSON Web Token?</h4>

<p>JSON Web令牌（JWT）是一个开放标准（<a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a>），它定义了一种协议且以自包含的方式在各方之间安全地传输JSON信息。由于此信息是经过数字签名的，因此可以被验证和信任。可以使用加密算法（如<strong>HMAC</strong>算法）或使用<strong>RSA</strong>或<strong>ECDSA</strong>的公钥/私钥对对JWT进行<strong>签名</strong>。</p>

<p>尽管可以对JWT进行加密以在双方之间提供保密性，但我们将重点关注已 <em>签发的</em> 令牌。已签发的令牌可以验证其中包含的声明的 <em>完整性</em> ，而加密的令牌则将这些声明 <em>隐藏</em> 在其他方的面前。当使用公钥/私钥对对令牌进行签名时，签名还证明只有持有私钥的一方才是对其进行签名的一方。</p>

<h4 id="1-2-jwt的使用场景">1.2 JWT的使用场景</h4>

<ul>
<li>授权：这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登陆(SSO)是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。</li>
<li>信息交换：JSON Web令牌是在各方之间安全地传输信息的好方法。因为可以对JWT进行签名（例如，使用公钥/私钥对），所以您可以确定发送方的身份。另外，由于签名是使用header和playload计算的，因此您还可以验证内容是否未被篡改。</li>
</ul>

<h4 id="1-3-json-web令牌结构">1.3 JSON Web令牌结构</h4>

<p>JSON Web令牌由三部分组成的轻量级令牌，这些部分由点（.）分隔，分别是：</p>

<ul>
<li>Header 头</li>
<li>Payload 信息载体</li>
<li>Signature 签名</li>
</ul>

<p>因此，JWT的格式一般如下所示：</p>

<p><code>xxxxx.yyyyy.zzzzz</code></p>

<h5 id="header">Header</h5>

<p>标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。
例如：</p>

<pre><code class="language-json">{
  &quot;alg&quot;: &quot;HS256&quot;,
  &quot;typ&quot;: &quot;JWT&quot;
}
</code></pre>

<p>然后，这个JSON会被<strong>Base64Url</strong>编码以放在JWT的第一部分。</p>

<h5 id="playload">Playload</h5>

<p>令牌的第二部分是Playload，其中包含声明。声明是有关实体（通常是用户信息）和其他数据的声明。有以下三种类型：registered, public, and private。</p>

<ul>
<li><p><a href="https://tools.ietf.org/html/rfc7519#section-4.1"><strong>Registered claims</strong></a>：这些是一组非强制性的但建议使用的预定义声明，以提供一组有用的，可互操作的权利要求。其中一些是： iss（签名签发者）， exp（到期时间）， sub（主题）， aud（受众）和 <a href="https://tools.ietf.org/html/rfc7519#section-4.1">其他</a>
&gt; 值得注意的是，由于JWT的轻量级，这些声明都是只有三个字符长度的</p></li>

<li><p><a href="https://tools.ietf.org/html/rfc7519#section-4.2"><strong>Public Claims</strong></a>：使用JWT的人可以随意定义这些声明。但是为避免冲突，应在<a href="https://www.iana.org/assignments/jwt/jwt.xhtml"> IANA JSON Web令牌注册表</a>中定义它们，或将其定义为命名空间不冲突的URI。</p></li>
</ul>

<blockquote>
<p>由于JWT的编码格式是可逆的，为了安全起见，要避免存放用户密码，手机号码，email等用户敏感信息。</p>
</blockquote>

<ul>
<li><a href="https://tools.ietf.org/html/rfc7519#section-4.3"><strong>Private claims</strong></a> ：这是各方都能识别的即不是用作<em>registered 声明</em> 也不是 <em>public</em> claims 声明，专门用于共享信息的自定义声明。</li>
</ul>

<p>示例playload：</p>

<pre><code class="language-json">{
  &quot;sub&quot;: &quot;1234567890&quot;,
  &quot;name&quot;: &quot;John Doe&quot;,
  &quot;admin&quot;: true
}
</code></pre>

<p>然后对playload进行Base64Url编码，得到JWT令牌的第二部分。</p>

<blockquote>
<p>请注意，对于已签发的令牌，此信息尽管可以防止篡改，但任何人都可以读取。除非将其加密，否则请勿将机密信息放入JWT的playload或header元素中。</p>
</blockquote>

<h5 id="signature-签名">Signature 签名</h5>

<p>要创建签名部分，您必须获取编码的Header，编码的Playload，使用header中指定的算法，并对其进行签名。</p>

<p>例如，如果要使用HMAC SHA256算法，则将通过以下方式创建签名：</p>

<pre><code class="language-java">HMACSHA256(
  base64UrlEncode(header) + &quot;.&quot; +
  base64UrlEncode(payload),
  secret)
</code></pre>

<p>签名的作用是验证消息在整个过程中没有更改，并且对于使用私钥进行签名的令牌，它还可以验证JWT的发送者是否信息中的指定真实身份。</p>

<blockquote>
<p>当使用私钥进行签名时，若攻击者篡改了身份id，由于每个身份对应的公钥是不同的，会导致服务端解密失败。</p>
</blockquote>

<p><strong>组合在一起</strong></p>

<p>最后输出的JWT，是三个由点分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递这些字符串，与基于XML的标准（例如SAML）相比，它更紧凑。</p>

<p>推荐一个JWT在线解码，验证和生成JWT的网站：<a href="http://jwt.io/">jwt.io Debugger</a>
<img src="/images/jwt-go/legacy-app-auth-5 (1).png" alt="legacy-app-auth-5 (1)" /></p>

<h4 id="1-4-jwt的工作流程">1.4 JWT的工作流程</h4>

<p>下图显示了如何获取JWT并将其用于访问API或资源：</p>

<p><img src="/images/jwt-go/qg4tew3ml3.png" alt="client-credentials-grant" /></p>

<ol>
<li>应用程序或客户端向授权服务器 <code>Authentication Server</code> 请求授权。这里通过不同的授权流程中的一种进行展示。例如，典型的符合<a href="http://openid.net/connect/">OpenID Connect的</a> Web应用程序将<code>/oauth/authorize</code>使用<a href="http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth">授权码流程</a>通过端点。</li>
<li>授权完毕后，授权服务器会将访问令牌JWT返回给应用程序，客户端将凭证信息存储在本地(cookie或浏览器缓存)</li>
<li>当用户发起新的请求时，需要在请求头中附带此凭证信息，当服务器接收到用户请求时，会先检查请求头中有无凭证，是否过期，是否有效。如果凭证有效，将放行请求；若凭证非法或者过期，服务器将回跳到认证中心，重新对用户身份进行验证，直至用户身份验证成功。</li>
</ol>

<h4 id="1-5-jwt-vs-cookie-session">1.5 JWT vs cookie-session</h4>

<h5 id="使用jwt的优点">使用JWT的优点：</h5>

<p><strong>1. 更易于服务端的水平扩展</strong></p>

<p>在cookie-session方案中，cookie内仅包含一个session标识符，而诸如用户信息、授权列表等都保存在服务端的session中。如果把session中的认证信息都保存在JWT中，在服务端就没有session存在的必要了。当服务端水平扩展的时候，就不用处理session复制（session replication）/ session黏连（sticky session）或是引入外部session存储了。</p>

<p><strong>2. 无状态</strong></p>

<p>jwt不在服务端存储任何状态。RESTful API的原则之一是无状态，发出请求时，总会返回带有参数的响应，不会产生附加影响。用户的认证状态引入这种附加影响，这破坏了这一原则。另外jwt的载荷中可以存储一些常用信息，用于交换信息，有效地使用 JWT，可以降低服务器查询数据库的次数。</p>

<p><strong>3. 防篡改</strong></p>

<p>由于JWT是由服务端颁发的，带有数字签名，因此可以有效防止被攻击者篡改。</p>

<p><strong>4.单点登录SSO</strong></p>

<p>由于JWT存储在客户端，因此接口调用时，JWT可以由独立、统一的用户权限认证中心进行用户身份认证和token签发。携带JWT的请求，微服务或子系统理论上不需要再访问认证中心，即可以使用公共的密钥进行验证。</p>

<p><strong>5.更少的数据库连接</strong></p>

<p>JWT的负载中存放的数据，具有不可篡改的特性，服务端可以直接使用，不需要从数据库中再次查询，从而达到减少数据库连接的效果，获得更快的系统响应时间。</p>

<p><strong>6.对 Restful 接口友好</strong></p>

<p>Restful接口的原则是无状态(<code>Statelessness</code>)。如果使用session来保存用户状态信息，那就意味着在基于状态的Web系统中的Server无法对用户请求进行负载均衡等自由的调度(一个Client请求只能由一个指定的Server处理)。</p>

<h5 id="使用jwt的缺点">使用JWT的缺点：</h5>

<p><strong>1. 安全性</strong></p>

<p>由于jwt的payload是使用base64编码的，并没有加密，因此jwt中不能存储敏感数据。而session的信息是存在服务端的，相对来说更安全。</p>

<p><strong>2. 无法作废已颁布的令牌</strong></p>

<p>所有的认证信息都在JWT中，由于在服务端没有状态，即使你知道了某个JWT被盗取了，你也没有办法将其作废。在JWT过期之前（你绝对应该设置过期时间），你无能为力。</p>

<p><strong>3.不易应对数据过期</strong></p>

<p>与上一条类似，JWT有点类似缓存，由于无法作废已颁布的令牌，在其过期前，你只能忍受“过期”的数据。</p>

<p><strong>4.严重依赖于秘钥</strong></p>

<p>如果秘钥不小心泄露，系统的安全性将受到威胁。服务端可以定期更换密钥，但必须考虑使用旧密钥签发的有效token的处理。</p>

<p><strong>5.服务端无法主动推送消息</strong></p>

<p>服务端由于是无状态的，JWT将无法使用像 Session 那样的方式推送消息到客户端，例如过期时间将至，服务端无法主动为用户续约，需要客户端向服务端发起续约请求。</p>

<p><strong>6.冗余的数据开销</strong></p>

<p>一个 JWT 签名的大小要远比一个 Session ID 长很多，如果你对有效载荷(payload)中的数据不做有效控制，其长度会成几何倍数增长，且在每一次请求时都需要负担额外的网络开销。</p>

<h4 id="1-6-jwt-vs-saml">1.6 JWT vs SAML？</h4>

<p>与<strong>简单Web令牌（SWT）</strong>和<strong>安全性声明标记语言令牌（SAML）</strong>相比，<strong>JSON Web令牌（JWT）</strong>有以下的好处。</p>

<p><strong>1.使用轻量级的JSON。</strong></p>

<p>由于JSON不如XML冗长，因此在编码时JSON的大小也较小，从而使JWT比SAML更轻量级。使用JWT是在HTML和HTTP环境中传递数据的不错的选择。</p>

<p><strong>2.更安全。</strong></p>

<p>SWT只能使用共享密钥的对称加密HMAC算法。而JWT和SAML令牌可以使用X.509证书形式的公/私钥进行签名。与JWT的简单性相比，对XML进行数字签名而不引入难以发现的安全漏洞似乎是一件很困难的事情。</p>

<p><strong>3.通用性</strong></p>

<p>JSON解析器在大多数编程语言中都很常见，因为它们直接映射到对象。相反，XML没有自然的文档到对象映射。与SAML断言相比，JWT使用起来更加容易。</p>

<p><strong>4.跨平台。</strong></p>

<p>考虑到JWT的用途，JWT常用于Internet。强调了在多个平台（尤其是移动端）上对JWT进行客户端处理的简便性。</p>

<p><strong>JWT VS SAML</strong>
<img src="/images/jwt-go/comparing-jwt-vs-saml2.png" alt="legacy-app-auth-5 (1)" />
与SAML对比，JWT的内容更加简短，http传输速度更快。</p>

<h3 id="二-jwt-claims-http-self-issued-info-docs-draft-ietf-oauth-json-web-token-html-rfc-section-4">二、<a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#rfc.section.4">JWT Claims</a></h3>

<h4 id="2-1-claim注册表">2.1 Claim注册表</h4>

<p>著名的<em>IANA</em>(The Internet Assigned Numbers Authority，互联网数字分配机构)给“JSON Web Token Claims”分配了一些标准的Claim。Claim注册表会记录“Claim Name”和定义它的规范。注册模板包括下面几个内容：<a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#rfc.section.10.1.1">Claim Name、Claim Description、Change Controller、Specification Documents</a></p>

<h4 id="2-2-jwt-claims">2.2 JWT Claims</h4>

<p>JWT Claim集合是可以被解析成JSON对象，它可以在JWT中进行传递。Claim Names在JWT Claim集合内不允许重名。</p>

<p>JWT Claim Names一共有三类：</p>

<ul>
<li>已注册的标准Claim Names。</li>
<li>公共属性的Claim Names。</li>
<li>私有属性的Claim Names。</li>
</ul>

<h4 id="2-3-已注册的claim-names">2.3 已注册的Claim Names</h4>

<p>一般情况下，已注册的Claim Names是可选的，不强制要求使用或者实现它，但它们提供了一组有用的，可操作的标记。使用JWT应用程序应定义使用了哪些特定的Claim，以及何时是必填的或者可选的。Claim的名称都很短（一般不超过8个字符），因为JWT的核心思想是使表示形式尽量紧凑。</p>

<p>下面列举了目前JWT已注册的7个Cliam。</p>

<table>
<thead>
<tr>
<th>Claim name</th>
<th>Claim Description</th>
<th>Claim Controller</th>
<th>Specification Document</th>
<th>含义</th>
</tr>
</thead>

<tbody>
<tr>
<td>iss</td>
<td>Issuer</td>
<td>IESG</td>
<td><a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#issDef">Section 4.1.1</a> of RFC 7519</td>
<td>标示JWT发行方，iss的值是区分大小写的字符串，其中包含了StringOrURI值。<em>（此声明的使用是可选的）</em></td>
</tr>

<tr>
<td>sub</td>
<td>Subject</td>
<td>IESG</td>
<td><a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#subDef">Section 4.1.2</a> of RFC 7519</td>
<td>sub标示JWT的主题。在issuer的上下文中，sub的值必须被限定为局部唯一或者全局唯一。sub是区分大小写的字符串，其中包含了StringOrURI值。<em>（此声明的使用是可选的）</em></td>
</tr>

<tr>
<td>aud</td>
<td>Audience</td>
<td>IESG</td>
<td><a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#audDef">Section 4.1.3</a> of RFC 7519</td>
<td>aud标示了JWT的目标收件人。每个打算处理JWT的sub必须在sub中标示自己的值。如果cliam中有声明aud但是未赋值，则必须拒绝该JWT。aud是区分大小写的字符串，其中包含了StringOrURI值。在特殊情况下，JWT只有一个aud，那么aud是可以包含StringOrURI的值且区分大小写。<em>（此声明的使用是可选的）</em></td>
</tr>

<tr>
<td>exp</td>
<td>Expiration Time</td>
<td>IESG</td>
<td><a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#expDef">Section 4.1.4</a> of RFC 7519</td>
<td>exp标示了JWT的到期时间。exp声明要求当前日期/时间必须早于exp。但实施者可以留一些余地，以解决时钟偏差，通常不超过几分钟。它的值必须的包含NumericDate值的数字。<em>（此声明的使用是可选的）</em></td>
</tr>

<tr>
<td>nbf</td>
<td>Not Before</td>
<td>IESG</td>
<td><a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#nbfDef">Section 4.1.5</a> of RFC 7519</td>
<td>nbf声明标示了禁止接受JWT的处理时间。nbf要求当前日期/时间必须晚于或等于nbf的要求。但实施者可以留一些余地，以解决时钟偏差，通常不超过几分钟。它的值必须的包含NumericDate值的数字。*（此声明的使用是可选的）</td>
</tr>

<tr>
<td>iat</td>
<td>Issued At</td>
<td>IESG</td>
<td><a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#iatDef">Section 4.1.6</a> of RFC 7519</td>
<td>iat标示了JWT的发布时间。此声明可用于确定JWT的存在时长。它的值必须的包含NumericDate值的数字。*（此声明的使用是可选的）</td>
</tr>

<tr>
<td>jti</td>
<td>JWT ID</td>
<td>IESG</td>
<td><a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#jtiDef">Section 4.1.7</a> of RFC 7519</td>
<td>jti声明为JWT提供了唯一标识符。标示符的分配方式必须确保将相同的值偶然分配给不同的数据对象的可能性极小。如果应用程序使用多个发行者，则还必须防止不同发行者之间产生的值之间发生冲突。jti可以用来防止重播JWT。jti是区分大小写的字符串。<em>（此声明的使用是可选的）</em></td>
</tr>
</tbody>
</table>

<h4 id="2-4-public-claim-names">2.4 Public Claim Names</h4>

<p>公共声明是可以由使用JWT的人员定义的。但是，为了防止冲突，任何新的Claim Name应该在<a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#JWTClaimsReg">第10.1节</a>建立的IANA“ JSON Web Token Claims”注册表中注册，或者应该是Public Name：包含防冲突名称的值。在每种情况下，名称或值的定义者都需要采取合理的预防措施，以确保它们可以控制用于定义“声明名称”的名称空间的一部分。</p>

<h4 id="2-5-private-claim-names">2.5 Private Claim Names</h4>

<p>JWT的生产者和消费者可以同意使用的私有名称的Claim Name。不能与已注册的Claim Names或公共的Claim Names冲突。与公共声明的名称不同的是，私有声明名称可能会发生冲突，应谨慎使用。</p>

<h3 id="三-jwt实战-go语言">三、JWT实战——Go语言</h3>

<p>各个语言的jwt官方推荐库： <a href="https://jwt.io/#libraries-io">https://jwt.io/#libraries-io</a></p>

<p>下面演示使用jwt-go生成jwt，验证jwt</p>

<pre><code class="language-go">package main

import (
   &quot;errors&quot;
   &quot;fmt&quot;
   &quot;github.com/dgrijalva/jwt-go&quot;
   &quot;os&quot;
   &quot;time&quot;
)

var HmacKeySecret = `W42!@=-wqqk#pIn&lt;A?130?eskfit]w\q'311mdasie./juwOW~w@9$MJhgPQ#&amp;6e`

func main(){
   fmt.Println(&quot;发起JWT请求..&quot;)

   //模拟创建jwt
   newJWT,err := IssueJWT()
   if err !=nil {
      fmt.Println(&quot;生成jwt失败!err:&quot;,err)
      os.Exit(1)
   }
   fmt.Println(&quot;生成jwt成功：&quot;)
   fmt.Println(newJWT)

   fmt.Println(&quot;===================================&quot;)
   fmt.Println(&quot;测试jwt验证...&quot;)

   err = ValidJWT(newJWT)
   if err !=nil {
      fmt.Println(&quot;JWT验证失败!err:&quot;,err)
      os.Exit(1)
   }
}

//创建jwt示例
func IssueJWT() (string,error) {
   //设置claims
   mapClaims := make(jwt.MapClaims, 0)

   //设置过期时间
   mapClaims[&quot;exp&quot;] = time.Now().Add(30 * time.Minute).Unix()
   //设置签发机构
   mapClaims[&quot;iss&quot;] = &quot;example.com&quot;



   //设置自定义负载
   mapClaims[&quot;isAdmin&quot;] = true
   mapClaims[&quot;csrf&quot;] = time.Now().Nanosecond()
   fmt.Printf(&quot;playload:%v\n&quot;,mapClaims)

   var newToken *jwt.Token
   //可选择多种加密方式
   newToken = jwt.NewWithClaims(jwt.SigningMethodHS256, mapClaims)

   if newToken == nil {
      return &quot;&quot;, errors.New(&quot;issue jwt failed, token is nil&quot;)
   }

   //生成完整的jwt
   tokenString, err := newToken.SignedString([]byte(HmacKeySecret))
   if err != nil {
      return &quot;&quot;, err
   }
   return tokenString, nil
}

//ValidJWT 验证jwt令牌
func ValidJWT(jwtStr string) error {
   token, err := jwt.Parse(jwtStr, func(token *jwt.Token) (i interface{}, e error) {
      //jwt会根据token.Header[&quot;alg&quot;]字段，自动匹配解密算法
      //返回约定的解密key
      return []byte(HmacKeySecret), nil
   })

   //jwt-go 默认校验exp，iss，nbf这三个claims。见标准claims校验方法 =&gt; func (c StandardClaims) Valid() error

   if err != nil {
      return err
   }

   if token == nil {
      return errors.New(&quot;token is nil&quot;)
   }

   fmt.Println(&quot;JWT校验成功!&quot;)
   if claims, ok := token.Claims.(jwt.MapClaims); ok &amp;&amp; token.Valid {
      fmt.Printf(&quot;Registered Claims =&gt; exp: %v, iss: %s\n&quot;, int64(claims[&quot;exp&quot;].(float64)), claims[&quot;iss&quot;])
      fmt.Printf(&quot;Private Claims =&gt; isAdmin: %v, csrf: %v\n&quot;, claims[&quot;isAdmin&quot;], int64(claims[&quot;csrf&quot;].(float64)))
   }

   return nil
}
</code></pre>

<p>运行结果：</p>

<pre><code class="language-shell">发起JWT请求..
playload:map[csrf:126322000 exp:1573662686 isAdmin:true iss:example.com]
生成jwt成功：
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjc3JmIjoxMjYzMjIwMDAsImV4cCI6MTU3MzY2MjY4NiwiaXNBZG1pbiI6dHJ1ZSwiaXNzIjoiZXhhbXBsZS5jb20ifQ.IeoSUjfwXHrbLqdNVboHaTEoIwDOQI4XFMPZLW2Vypg
===================================
测试jwt验证...
JWT校验成功!
Registered Claims =&gt; exp: 1573662686, iss: example.com
Private Claims =&gt; isAdmin: true, csrf: 126322000

</code></pre>

<h3 id="四-jwt最佳实践-防坑指南">四、JWT最佳实践——防坑指南</h3>

<h4 id="4-1-如何提高jwt的安全性">4.1 如何提高JWT的安全性？</h4>

<p>由于JWT是访问受限资源的凭据，获得JWT后需要防止安全的问题。</p>

<ul>
<li><p>通常JWT会设置时效性，保留规定的一段时间后自动失效。</p></li>

<li><p>使用Https加密信道进行信息传输。</p></li>

<li><p>使用Http header 传递JWT
在请求过程中，所发送的JWT通常存放在使用<strong>Bearer</strong>模式的header中。格式如下：</p>

<pre><code class="language-javascript">Authorization: Bearer &lt;token&gt;
</code></pre></li>

<li><p>如果JWT未进行加密，则不要将用户敏感信息放在playload。</p></li>
</ul>

<blockquote>
<p>使用JWT会将令牌或者令牌中包含的所有信息都暴露给用户或者其他地方，即使他们无法篡改它，但也意味着不应该将机密信息放入令牌中（如身份证，电话，地址等用户敏感信息）。</p>

<p>如有必要，为了能够减少数据库的查询，可以使用对称/非对称加密算法，加密后再存放到JWT，后端根据预设的解密流程解密即可。</p>
</blockquote>

<ul>
<li>一些关键资源的操作，进行二次验证
&gt; 对于一些系统敏感、关键资源的修改，比如转账，删除账号等，需要做二次验证。比如手机短信验证，人脸识别，指纹识别，语音识别，邮箱验证码等。</li>
</ul>

<h4 id="4-2-浏览器如何安全地存储jwt">4.2 浏览器如何安全地存储JWT？</h4>

<p>web浏览器在存储JWT，主要关注令牌是否容易被窃取，是否会受到CSRF、XSS攻击。</p>

<ul>
<li>避免将JWT存放在local-storage中。如果您的JWT是存放在cookies内。cookies可以使用httpOnly标志，避免被JavaScript进行访问，减少被窃取的风险。将HttpOnly设置为true，可以避免XSS攻击，但不能防御CSRF攻击，需要加入包含随机值的 <code>csrf令牌</code> 才能保障安全。</li>
</ul>

<blockquote>
<p><code>local-storage</code> 是一种被广泛使用的离线存储，web存储。如果当前用户对计算机有本地管理员权限，则很容易会被窃取到local-storage的信息。因此，建议不要在local-storage中存储任何敏感的信息。</p>
</blockquote>

<ul>
<li>【推荐的实践】在JWT的内容中加入一个随机值作为CSRF令牌，由服务端将该CSRF令牌也保存在cookie中，但设置HttpOnly=false，这样前端Javascript代码就可以取得该CSRF令牌，并在请求API时作为HTTP header传回。服务端在认证时，从JWT中取出CSRF令牌与header中获得CSRF令牌比较，从而实现对CSRF攻击的防护(利用同源策略)。为了防止XSS攻击，服务端接收用户输入数据或前端渲染时，需要对特殊字符进行转义。</li>
</ul>

<blockquote>
<p>如果你的令牌是在<code>Authorization</code> 的header中发送的话，那么CORS（Cross-Origin Resource Sharing  跨域访问）就不再是问题了，因为它不使用cookies</p>
</blockquote>

<h4 id="4-3-如何应对jwt泄露">4.3 如何应对JWT泄露</h4>

<p>不管是基于 Sessions 还是基于 JSON Web Token，一旦密令被盗取，都是一件棘手的事情。
为了防止用户 JWT 令牌泄露而威胁系统安全，你可以在以下几个方面完善系统功能：</p>

<ul>
<li>清除已泄露的令牌：此方案最直接，也容易实现，但同时也引入了外部依赖及单点风险。你需将 JWT 令牌在服务端也存储一份，若发现有异常的令牌存在，则从服务端令牌列表中将此异常令牌清除。当用户发起请求时，强制用户重新进行身份验证，直至验证成功。对于服务端的令牌存储，可以借助 Redis 等缓存服务器进行管理，也可以使用 Ehcache 将令牌信息存储在内存中。</li>
<li>敏感操作保护：在涉及到诸如新增，修改，删除，上传，下载等敏感性操作时，定期(30分钟，15分钟甚至更短)检查用户身份，如手机验证码，扫描二维码等手段，确认操作者是用户本人。如果身份验证不通过，则终止请求，并要求重新验证用户身份信息。</li>
<li>地域检查：通常用户会在一个相对固定的地理范围内访问应用程序，可以将地理位置信息作为一个辅助来甄别用户的 JWT 令牌是否存在问题。如果发现用户A由经常所在的地区 1 变到了相对较远的地区 2 ，或者频繁在多个地区间切换，不管用户有没有可能在短时间内在多个地域活动(一般不可能)，都应当终止当前请求，强制用户重新进行验证身份，颁发新的 JWT 令牌，并提醒(或要求)用户重置密码。</li>
<li>监控请求频率：如果 JWT 密令被盗取，攻击者或通过某些工具伪造用户身份，高频次的对系统发送请求，以套取用户数据。针对这种情况，可以监控用户在单位时间内的请求次数，当单位时间内的请求次数超出预定阈值值，则判定该用户密令是有问题的。例如 1 秒内连续超过 5 次请求，则视为用户身份非法，服务端终止请求并强制将该用户的 JWT 密令清除，然后回跳到认证中心对用户身份进行验证。</li>
<li>客户端环境检查：对于一些移动端应用来说，可以将用户信息与设备(手机,平板)的机器码进行绑定，并存储于服务端中，当客户端发起请求时，可以先校验客户端的机器码与服务端的是否匹配，如果不匹配，则视为非法请求，并终止用户的后续请求。</li>
</ul>

<h3 id="参考资料">参考资料：</h3>

<p><a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#JWTClaimsReg">IETF文档#JWT —— ISSN：2070-1721</a></p>

<p><a href="https://www.cnblogs.com/yibutian/p/9507866.html">https://www.cnblogs.com/yibutian/p/9507866.html</a></p>

<p><a href="https://cloud.tencent.com/developer/article/1495531">https://cloud.tencent.com/developer/article/1495531</a></p>
]]></content>
        </item>
        
        <item>
            <title>Golang语法特点</title>
            <link>https://likego.club/posts/2019/10/golang%E8%AF%AD%E6%B3%95%E7%89%B9%E7%82%B9/</link>
            <pubDate>Sun, 27 Oct 2019 03:19:48 +0800</pubDate>
            
            <guid>https://likego.club/posts/2019/10/golang%E8%AF%AD%E6%B3%95%E7%89%B9%E7%82%B9/</guid>
            <description>1、Golang关键字 Golang的语法整体来说比较简洁，风格高度统一。 Golang只有25个关键字
   break case chan const continue     default defer else fallthrough for   func go goto if import   interface map package range return   select struct switch type var    语法简单，上手速度快，由于编程风格的统一，因此在代码review，浏览其他开源的golang项目时，会有非常熟悉的感觉。
2、自动识别变量类型 sum := 10 str := &amp;quot;hello word&amp;quot; //上述语句简化了变量声明与赋值 var sum int sum = 10 var str string str = “hello word”  3、for表达式 package main import &amp;quot;fmt&amp;quot; func main(){ sum := 0 for index :=0; index &amp;lt; 10 ; index++ { sum += index } fmt.</description>
            <content type="html"><![CDATA[

<h3 id="1-golang关键字">1、Golang关键字</h3>

<p>Golang的语法整体来说比较简洁，风格高度统一。
Golang只有25个关键字</p>

<table>
<thead>
<tr>
<th>break</th>
<th>case</th>
<th>chan</th>
<th>const</th>
<th>continue</th>
</tr>
</thead>

<tbody>
<tr>
<td>default</td>
<td>defer</td>
<td>else</td>
<td>fallthrough</td>
<td>for</td>
</tr>

<tr>
<td>func</td>
<td>go</td>
<td>goto</td>
<td>if</td>
<td>import</td>
</tr>

<tr>
<td>interface</td>
<td>map</td>
<td>package</td>
<td>range</td>
<td>return</td>
</tr>

<tr>
<td>select</td>
<td>struct</td>
<td>switch</td>
<td>type</td>
<td>var</td>
</tr>
</tbody>
</table>

<p>语法简单，上手速度快，由于编程风格的统一，因此在代码review，浏览其他开源的golang项目时，会有非常熟悉的感觉。</p>

<h3 id="2-自动识别变量类型">2、自动识别变量类型</h3>

<pre><code class="language-go">sum := 10
str := &quot;hello word&quot;

//上述语句简化了变量声明与赋值
var sum int
sum = 10

var str string
str = “hello word”
</code></pre>

<h3 id="3-for表达式">3、for表达式</h3>

<pre><code class="language-go">package main

import &quot;fmt&quot;

func main(){
         sum := 0
         for index :=0; index &lt; 10 ; index++ {
                 sum += index
         }
         fmt.Println(&quot;sum is equal to &quot;, sum)
}
</code></pre>

<p>Golang中没有while关键字，可以使用for进行代替，忽略expression1和expression3：</p>

<pre><code class="language-go">sum := 1
for sum &lt; 1000 {
     sum += sum
}
</code></pre>

<h3 id="4-go里面switch默认相当于每个case最后带有break">4、Go里面switch默认相当于每个case最后带有break</h3>

<p>Go的switch非常灵活，表达式不必是常量或整数，也可以使用多个逗号分隔的方式匹配多个值，执行的过程从上至下，直到找到匹配项；而如果switch没有表达式，它会匹配true。</p>

<pre><code class="language-go">i := 10
switch i/10 {
    case 1:
             fmt.Println(&quot;i is equal to 1&quot;)
    case 2, 3, 4:
             fmt.Println(&quot;i is equal to 2, 3 or 4&quot;)
    case 10:
             fmt.Println(&quot;i is equal to 10&quot;)
    default:
             fmt.Println(&quot;All I know is that i is an integer&quot;)
}
</code></pre>

<h3 id="5-切片slice">5、切片slice</h3>

<h3 id="6-函数定义func">6、函数定义func</h3>

<p>函数 <code>func</code>是Go里面的核心设计，它通过关键字 <code>func</code> 来声明，它的格式如下：</p>

<pre><code class="language-go">func funcName( input1 type1, input2 ...type2) (output1 type1, output2 type2) {
         //这里是处理逻辑代码
         //返回多个值
         return value1, value2
}
</code></pre>

<ul>
<li><p>Go函数支持变参，即入参可以是一个不定参数，可以接受多个不确定数量的参数，比如input2</p>

<pre><code class="language-go">func test1(args ...string) { //可以接受任意个string参数
    for _, v:= range args{
        fmt.Println(v)
    }
}
func main(){
var strss= []string{
        &quot;qwr&quot;,
        &quot;234&quot;,
        &quot;yui&quot;,
        &quot;cvbc&quot;,
    }
test1(strss...) //切片被打散传入
}
</code></pre></li>

<li><p>Go语言比C更先进的特性，其中一点就是函数能够返回多个值</p></li>

<li><p>如果没有返回值，那么就直接省略最后的返回信息</p></li>
</ul>

<h3 id="7-defer-延迟语句">7、defer 延迟语句</h3>

<p>Go语言中有种不错的设计，即延迟（defer）语句，你可以在函数中添加多个defer语句。当函数执行到最后时，这些defer语句会按照逆序执行，最后该函数返回。特别是当你在进行一些打开资源的操作时，遇到错误需要提前返回，在返回前你需要关闭相应的资源，不然很容易造成资源泄露等问题。如下代码所示，我们一般写打开一个资源是这样操作的：</p>

<pre><code class="language-go">func ReadWrite() bool {
         file.Open(&quot;file&quot;)
         // 做一些工作
         if failureX {
                  file.Close()
                  return false
         }
         if failureY {
                  file.Close()
                  return false
         }
         file.Close()
         return true
}
</code></pre>

<p>我们看到上面有很多重复的代码，如果代码多的时候，还有可能忘记写file.close()。Go的defer有效解决了这个问题。使用它后，不但代码量减少了很多，而且程序变得更优雅。在defer后指定的函数会在函数退出前调用。</p>

<p><strong>代码使用defer改写如下：</strong></p>

<pre><code class="language-go">func ReadWrite() bool {
        defer fmt.println(&quot;all done&quot;)
         file.Open(&quot;file&quot;)
         //open之后，可以马上写一个defer，函数退出前即可把文件关闭
         defer file.Close()
         if failureX {
                  return false
         }
         if failureY {
                  return false
         }
         defer fmt.println(&quot;1st defer&quot;)
         return true
}
</code></pre>

<p>值得注意的是，defer执行顺序是先进后出。上面的例子，在函数退出之前，会先打印&rdquo;1st defer&rdquo;，再执行file.Close()，最后打印&rdquo;all done&rdquo;。</p>

<h3 id="8-panic和recover">8、Panic和Recover</h3>

<p>一般来说，我们应该尽可能地使用错误，而不是使用 panic 和 recover
一般如果函数执行的异常，会抛出一个error类型的返回参数，我们在函数外部对error进行处理即可。</p>

<pre><code class="language-go">
func foo(param int)(ret int, err error)
{
    //若函数正常执行，返回的err为nil，否则返回一个不为nill的error
    ...  
}

//调用时的代码
func main(){
    n, err := foo(0)
    if err != nil {
        //  错误处理
    } else {
        // 使用返回值n
    }
}
</code></pre>

<p>但有时候，一些函数不会返回error，而是直接panic或者运行时的panic。Go没有像Java那样的异常机制(try catch)，它不能抛出异常，而是使用了<code>panic</code>和<code>recover</code>机制。<strong>Panic的时候如果程序不使用recover进行异常捕获处理，会导致整个程序退出。</strong></p>

<p>panic 有两个合理的用例。</p>

<ul>
<li>1、发生了一个不能恢复的错误，此时程序不能继续运行。 一个例子就是 web 服务器无法绑定所要求的端口。在这种情况下，就应该使用 panic，因为如果不能绑定端口，啥也做不了。</li>
<li>2、发生了一个编程上的错误。 假如我们有一个接收指针参数的方法，而其他人使用 nil 作为参数调用了它。在这种情况下，我们可以使用 panic，因为这是一个编程错误：用 nil 参数调用了一个只能接收合法指针的方法。</li>
</ul>

<p>8.1 主动panic
下面这个函数演示了如何在过程中使用panic</p>

<pre><code class="language-go">var user = os.Getenv(&quot;USER&quot;)
//值得一提的是，golang import一个包后，如果包内有init函数，会自动执行init函数，对包内的资源做一些初始化的工作
func init() {
         if user == &quot;&quot; {
                 //主动使用panic
                 panic(&quot;no value for $USER&quot;)
         }
}
</code></pre>

<blockquote>
<p>顺带一提：main函数引入包初始化流程图
<img src="/images/p48-2358709.png" alt="p48-2358709.png" /></p>
</blockquote>

<p>8.2 当函数发生 panic 时，它会终止运行，在执行完所有的延迟函数后，程序控制返回到该函数的调用方。</p>

<pre><code class="language-go">package main

import (  
    &quot;fmt&quot;
)

func fullName(firstName *string, lastName *string) {  
    defer fmt.Println(&quot;deferred call in fullName&quot;)
    if firstName == nil {
        panic(&quot;runtime error: first name cannot be nil&quot;)
    }
    if lastName == nil {
        panic(&quot;runtime error: last name cannot be nil&quot;)
    }
    fmt.Printf(&quot;%s %s\n&quot;, *firstName, *lastName)
    fmt.Println(&quot;returned normally from fullName&quot;)
}

func main() {  
    defer fmt.Println(&quot;deferred call in main&quot;)
    firstName := &quot;Elon&quot;
    fullName(&amp;firstName, nil)
    fmt.Println(&quot;returned normally from main&quot;)
}

</code></pre>

<blockquote>
<p>该函数会打印：
deferred call in fullName<br />
deferred call in main<br />
panic: runtime error: last name cannot be nil
goroutine 1 [running]:<br />
main.fullName(0x1042bf90, 0x0)<br />
    /tmp/sandbox060731990/main.go:13 +0x280
main.main()<br />
    /tmp/sandbox060731990/main.go:22 +0xc0</p>
</blockquote>

<p>8.3 <code>recover</code> 是一个内建函数，用于重新获得 <code>panic</code> 协程的控制。
值得注意的是：<strong>只有在延迟函数的内部，调用 recover 才有用。</strong>
在延迟函数内调用 recover，可以取到 panic 的错误信息，并且停止 panic 续发事件（Panicking Sequence），程序运行恢复正常。如果在延迟函数的外部调用 recover，就不能停止 panic 续发事件。</p>

<p>下面这个函数检查作为其参数的函数在执行时是否会产生panic：</p>

<pre><code class="language-go">func throwsPanic(f func()) (b bool) {
         defer func() {
                 if x := recover(); x != nil {
                          b = true
                 }
         }()
         f() //执行函数f，如果f中出现了panic，那么就可以恢复回来
         return
}
</code></pre>

<h3 id="9-go语言中面向对象编程">9、go语言中面向对象编程</h3>

<p>下面的例子演示了golang中定义对象，定义public、private属性，对象函数的方法</p>

<pre><code class="language-go">package main

import &quot;fmt&quot;

type Human struct {
     name string
     age int
     phone string
}

type Student struct {
     Human //匿名字段
     school string
}

type Employee struct {
     Human //匿名字段
     company string
}

//Human定义method
func (h *Human) SayHi() {
     fmt.Printf(&quot;Hi, I am %s you can call me on %s\n&quot;, h.name, h.phone)
}



//Employee的method重写Human的method
func (e *Employee) SayHi() {
     fmt.Printf(&quot;Hi, I am %s, I work at %s. Call me on %s\n&quot;, e.name,
     e.company, e.phone) //Yes you can split into 2 lines here.
}

func main() {
     mark := Student{Human{&quot;Mark&quot;, 25, &quot;222-222-YYYY&quot;}, &quot;MIT&quot;}
     sam := Employee{Human{&quot;Sam&quot;, 45, &quot;111-888-XXXX&quot;}, &quot;Golang Inc&quot;}
     mark.SayHi()
     sam.SayHi()
}
</code></pre>

<p>Go里面的面向对象是如此的简单，没有任何的私有、公有关键字，通过大小写来实现(大写开头的为公有，小写开头的为私有)，方法也同样适用这个原则。</p>

<h3 id="10-非侵入式接口">10、非侵入式接口</h3>

<p>编译时对“引用”的类和接口定义的依赖，我们称之为“侵入性”的；任何显式的“接口”、“基类”都是侵入性的，不可避免的带来编译期依赖；即使这些依赖很小，但依然有办法而且应该尽可能消除。</p>

<p>我们先来看看java中的实现接口</p>

<pre><code class="language-java">public interface Geometry{
  public float Area();
}

public class Rect implements Geometry {
   ...
   @override
   public float Area(){
     //具体实现
     ...
   }
   
}
</code></pre>

<p>Go语言的接口设计是一种非侵入性的设计，作为服务提供者不用预先知道所需要实现的接口，也不用为了实现某一个接口而import一个专门的包。而接口可以被定义在客户端，按需求定义，同时接口与接口之间也可以相互赋值，这样就不用过多忧心接口的粒度，给接口设计带来了很大的灵活性。</p>

<p><strong>animal.go</strong></p>

<pre><code class="language-go">package pkg

import &quot;fmt&quot;

type Animal interface{
	Eat()
}

type Bird interface {
	Fly()
}

//定义Dog时，我们并没有在代码的任何地方告诉Dog或者Pig这两个struct它们需要去实现Animal接口
type Dog struct {
	Weight float64
}

//Dog实现了Eat接口，即认为是Animal
func(d *Dog) Eat(){
	fmt.Printf(&quot;体重%.1fkg的狗正在进食...\n&quot;,d.Weight)
}

type Pig struct {
	Weight float64
}

//Pig实现了Fly接口，即认为是Bird
func(d *Pig) Fly(){
	fmt.Printf(&quot;体重%.1fkg的猪正在飞...\n&quot;,d.Weight)
}

//Pig实现了Fly接口，即认为是Animal
func(d *Pig) Eat(){
	fmt.Printf(&quot;体重%.1fkg的猪正在进食...\n&quot;,d.Weight)
}
</code></pre>

<p><strong>main.go</strong></p>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;github.com/superqbb/GoCourse/Object/pkg&quot;
)

func Dinner(a pkg.Animal){
	a.Eat()
}

func WindCome(b pkg.Bird){
	b.Fly()
}

//非侵入式接口演示
func main(){
	myDog := &amp;pkg.Dog{Weight:4}
	myPig := &amp;pkg.Pig{Weight:80}

	//因为Dog,Pig都实现了Animal接口，编译器会自动识别
	Dinner(myDog)
	Dinner(myPig)

	fmt.Printf(&quot;风来了...\n&quot;)
	WindCome(myPig)
}
</code></pre>
]]></content>
        </item>
        
    </channel>
</rss>
